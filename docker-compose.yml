version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: auth-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./db/mongo/seeds:/docker-entrypoint-initdb.d
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 10s

  # Redis service
  redis:
    image: redis:alpine
    container_name: auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 10s

  # Backend API service
  auth-service:
    build:
      context: ./src/service
      dockerfile: Dockerfile
    container_name: auth-service-api
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RECAPTCHA_SITE_KEY=${RECAPTCHA_SITE_KEY}
      - RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./src/service:/app
    networks:
      - auth-network

  # Frontend UI service
  auth-ui:
    build:
      context: ./src/ui
      dockerfile: Dockerfile
    container_name: auth-ui
    ports:
      - "3001:3001"
    depends_on:
      - auth-service
    volumes:
      - ./src/ui:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - VITE_API_URL=http://localhost:3000
    networks:
      - auth-network

# Volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:

# Networks
networks:
  auth-network:
    driver: bridge 